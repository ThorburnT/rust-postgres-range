var searchIndex = {};
searchIndex['postgres_range'] = {"items":[[0,"","postgres_range","Types dealing with ranges of values"],[3,"RangeBound","","Represents a one-sided bound."],[12,"value","","The value of the bound",0],[12,"type_","","The type of the bound",0],[3,"Range","","Represents a range of values."],[4,"BoundSide","","The possible sides of a bound"],[13,"Upper","","An upper bound",1],[13,"Lower","","A lower bound",1],[4,"UpperBound","","A tag type representing an upper bound"],[4,"LowerBound","","A tag type representing a lower bound"],[4,"BoundType","","The type of a range bound"],[13,"Inclusive","","The bound includes its value",2],[13,"Exclusive","","The bound excludes its value",2],[11,"raw_from_sql","","",3],[11,"from_sql","core::option","",4],[11,"from_sql","postgres_range","",3],[11,"from_sql","core::option","",4],[11,"from_sql","postgres_range","",3],[11,"from_sql","core::option","",4],[11,"from_sql","postgres_range","",3],[11,"raw_to_sql","","",3],[11,"to_sql","","",3],[11,"to_sql","core::option","",4],[11,"to_sql","postgres_range","",3],[11,"to_sql","core::option","",4],[11,"to_sql","postgres_range","",3],[11,"to_sql","core::option","",4],[8,"Normalizable","postgres_range","A trait that normalizes a range bound for a type"],[10,"normalize","","Given a range bound, returns the normalized version of that bound. For\ndiscrete types such as i32, the normalized lower bound is always\ninclusive and the normalized upper bound is always exclusive. Other\ntypes, such as Timespec, have no normalization process so their\nimplementation is a no-op.",5],[11,"normalize","time","",6],[11,"eq","postgres_range","",1],[11,"ne","","",1],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"partial_cmp","","",0],[11,"cmp","","",0],[11,"new","","Constructs a new range bound",0],[11,"in_bounds","","Determines if a value lies within the range specified by this bound.",0],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",3],[11,"new","","Creates a new range.",3],[11,"empty","","Creates a new empty range.",3],[11,"is_empty","","Determines if this range is the empty range.",3],[11,"lower","","Returns the lower bound if it exists.",3],[11,"upper","","Returns the upper bound if it exists.",3],[11,"contains","","Determines if a value lies within this range.",3],[11,"contains_range","","Determines if a range lies completely within this range.",3],[11,"intersect","","Returns the intersection of this range with another",3],[11,"union","","Returns the union of this range with another if it is contiguous",3],[14,"range!","","The `range!` macro can make it easier to create ranges. It roughly mirrors\ntraditional mathematic range syntax."]],"paths":[[3,"RangeBound"],[4,"BoundSide"],[4,"BoundType"],[3,"Range"],[4,"Option"],[8,"Normalizable"],[3,"Timespec"]]};
initSearch(searchIndex);
